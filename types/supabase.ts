/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/groups": {
    get: {
      parameters: {
        query: {
          /** Group ID */
          id?: parameters["rowFilter.groups.id"];
          /** Time of Group creation */
          created_at?: parameters["rowFilter.groups.created_at"];
          /** Group Name */
          name?: parameters["rowFilter.groups.name"];
          /** Members of the group int array */
          members?: parameters["rowFilter.groups.members"];
          /** Public or private */
          public?: parameters["rowFilter.groups.public"];
          /** Group ID - used to join group */
          groupid?: parameters["rowFilter.groups.groupid"];
          /** Vote to suspend game */
          suspend?: parameters["rowFilter.groups.suspend"];
          emails?: parameters["rowFilter.groups.emails"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["groups"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** groups */
          groups?: definitions["groups"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** Group ID */
          id?: parameters["rowFilter.groups.id"];
          /** Time of Group creation */
          created_at?: parameters["rowFilter.groups.created_at"];
          /** Group Name */
          name?: parameters["rowFilter.groups.name"];
          /** Members of the group int array */
          members?: parameters["rowFilter.groups.members"];
          /** Public or private */
          public?: parameters["rowFilter.groups.public"];
          /** Group ID - used to join group */
          groupid?: parameters["rowFilter.groups.groupid"];
          /** Vote to suspend game */
          suspend?: parameters["rowFilter.groups.suspend"];
          emails?: parameters["rowFilter.groups.emails"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** Group ID */
          id?: parameters["rowFilter.groups.id"];
          /** Time of Group creation */
          created_at?: parameters["rowFilter.groups.created_at"];
          /** Group Name */
          name?: parameters["rowFilter.groups.name"];
          /** Members of the group int array */
          members?: parameters["rowFilter.groups.members"];
          /** Public or private */
          public?: parameters["rowFilter.groups.public"];
          /** Group ID - used to join group */
          groupid?: parameters["rowFilter.groups.groupid"];
          /** Vote to suspend game */
          suspend?: parameters["rowFilter.groups.suspend"];
          emails?: parameters["rowFilter.groups.emails"];
        };
        body: {
          /** groups */
          groups?: definitions["groups"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/voting": {
    get: {
      parameters: {
        query: {
          suspend?: parameters["rowFilter.voting.suspend"];
          created?: parameters["rowFilter.voting.created"];
          email?: parameters["rowFilter.voting.email"];
          votes?: parameters["rowFilter.voting.votes"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["voting"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** voting */
          voting?: definitions["voting"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          suspend?: parameters["rowFilter.voting.suspend"];
          created?: parameters["rowFilter.voting.created"];
          email?: parameters["rowFilter.voting.email"];
          votes?: parameters["rowFilter.voting.votes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          suspend?: parameters["rowFilter.voting.suspend"];
          created?: parameters["rowFilter.voting.created"];
          email?: parameters["rowFilter.voting.email"];
          votes?: parameters["rowFilter.voting.votes"];
        };
        body: {
          /** voting */
          voting?: definitions["voting"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** @description Groups for jaycamper */
  groups: {
    /**
     * Format: smallint
     * @description Group ID
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @description Time of Group creation
     * @default now()
     */
    created_at?: string;
    /**
     * Format: text
     * @description Group Name
     * @default
     */
    name: string;
    /**
     * Format: ARRAY
     * @description Members of the group int array
     */
    members?: unknown[];
    /**
     * Format: boolean
     * @description Public or private
     * @default true
     */
    public?: boolean;
    /**
     * Format: uuid
     * @description Group ID - used to join group
     *
     * Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    groupid: string;
    /**
     * Format: boolean
     * @description Vote to suspend game
     * @default false
     */
    suspend: boolean;
    /** Format: ARRAY */
    emails?: unknown[];
  };
  voting: {
    /**
     * Format: boolean
     * @default false
     */
    suspend?: boolean;
    /**
     * Format: timestamp with time zone
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created: string;
    /** Format: ARRAY */
    email?: unknown[];
    /** Format: real */
    votes?: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description groups */
  "body.groups": definitions["groups"];
  /**
   * Format: smallint
   * @description Group ID
   */
  "rowFilter.groups.id": string;
  /**
   * Format: timestamp with time zone
   * @description Time of Group creation
   */
  "rowFilter.groups.created_at": string;
  /**
   * Format: text
   * @description Group Name
   */
  "rowFilter.groups.name": string;
  /**
   * Format: ARRAY
   * @description Members of the group int array
   */
  "rowFilter.groups.members": string;
  /**
   * Format: boolean
   * @description Public or private
   */
  "rowFilter.groups.public": string;
  /**
   * Format: uuid
   * @description Group ID - used to join group
   */
  "rowFilter.groups.groupid": string;
  /**
   * Format: boolean
   * @description Vote to suspend game
   */
  "rowFilter.groups.suspend": string;
  /** Format: ARRAY */
  "rowFilter.groups.emails": string;
  /** @description voting */
  "body.voting": definitions["voting"];
  /** Format: boolean */
  "rowFilter.voting.suspend": string;
  /** Format: timestamp with time zone */
  "rowFilter.voting.created": string;
  /** Format: ARRAY */
  "rowFilter.voting.email": string;
  /** Format: real */
  "rowFilter.voting.votes": string;
}

export interface operations {}

export interface external {}
